#スペース区切りの出力
#渡した要素を順にスペース区切りで 1 行で出力
print("Hello world",123)

#1行で改行区切りで出力
print("Hello, world!", 123, sep="\n")

#1つの実行文を複数の行に分けて記述したい場合、
#バックスラッシュ \ を用いて次のように書くことができる

res = 1 + 2 + 3 + 4 \
     + 5 + 6 + 7 + 8
print(res)

#入力
input()
#空白区切りの入力
a,b,c = input().split()
#空白区切りの入力(整数)
a, b, c = map(int, input().split())
#区切り文字を指定可能
a, b, c = input().split(":")

# a の長さ 5 を出力する
print(len(a))

# 入力から 1 行読み取り、空白で区切って整数のリストを作る
a = list(map(int, input().split()))

#リストの出力
print(*a)

# リスト [1, 6] とリスト [1, 8] をつなげて [1, 6, 1, 8] を作り、a に代入する
a = [1, 6] + [1, 8]
# リスト [0, 1, 2] を 3 回繰り返したリスト [0, 1, 2, 0, 1, 2, 0, 1, 2] を作り、a に代入する
a = [0, 1, 2] * 3

#リストの末尾に要素を追加、削除
a.append(1)
a.pop()
#i番目の要素を取得しながら削除
a.pop(i)
#xがaの中に何個存在するかを取得する
a.count(x)
#aの中にxが出現する最初の位置を取得する
a.index(x)
"""
\n : 改行文字
\" :"（二重引用符）
\' :'（一重引用符）
\\ :\（バックスラッシュ）
\t :水平タブ
"""

#文字列のリストを連結
# ["1", "23", "456"] を文字列 " + " で結合してできる文字列 "1 + 23 + 456" を出力する
print(" + ".join(a))

#部分文字列

#sの部分文字列にtが含まれるかどうか判定
t in s
#sに現れる最初の部分文字列tの位置を求める
s.index(t)
#sに部分文字列tが重ならずに何回出現するかを求める
s.count(t)
#sに重ならずに出現する部分文字列tをすべてuに置き換えた文字列を取得
s.replace(t,u)

#大文字判定
s.isupper()
#小文字判定
s.islower()
#全て数字かの判定
s.isdigit()
#大文字小文字変換
s.uuper()
s.lower()

#文字列の一部を変更
# 文字列 "AtCoder" を作り s に代入する
s = "AtCoder"

# s は for 文に入れられるものであるから、list(s) で
# リスト ["A", "t", "C", "o", "d", "e", "r"] を作れる
a = list(s)

# a の 0 番目の要素を "M" に変更する
a[0] = "M"

# a の要素をつなげて出力する
print("".join(a))

#組込み関数

#絶対値
abs(a)
#aのｂ乗
pow(a,b)
#リストの合計,ソート
l = [1,3,-5,2]
sum(l)
sorted(l)
#リストの要素全てが条件式として真であるか
all([v>0 for v in l])
#リストの要素の中に条件式として真であるものが1つ以上存在するか
any([v%2==0 for v in l])
#リストのインデックスと値を同時に取得
l = [1, 3, -5, 2]
for i,v in enumerate(l):
    print(i, "番目の要素は", v, "です")
